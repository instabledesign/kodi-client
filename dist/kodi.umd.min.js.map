{"version":3,"file":"kodi.umd.min.js","sources":["../src/KodiRequest.js","../src/KodiRequestFactory.js","../src/KodiClient.js","../src/KodiClientRPC.js","../src/KodiNotification.js","../src/KodiResponse.js","../src/transport/KodiWebSocketTransport.js","../src/transport/KodiXMLHttpTransport.js","../src/middleware/notifier/logging.js","../src/middleware/notifier/stackFactory.js","../src/middleware/query/logging.js","../src/middleware/query/cache.js","../src/middleware/query/stackFactory.js","../src/cache/InMemory.js","../src/cache/LocalStorage.js","../src/cache/withTTL.js","../src/KodiClientFactory.js"],"sourcesContent":["const JSONRPC_VERSION = '2.0';\n\nfunction KodiRequest(id, options) {\n    if (!(this instanceof KodiRequest)) {\n        return new KodiRequest(id, options);\n    }\n\n    if (options && 'object' !== Object.prototype.toString.call(options).split(\" \").pop().split(\"]\").shift().toLowerCase()) {\n        throw new TypeError('Options must be an object.');\n    }\n\n    this.id = id;\n\n    ({\n        method: this.method,\n        params: this.params,\n        jsonrpc: this.jsonrpc = JSONRPC_VERSION\n    } = options || {});\n}\n\nKodiRequest.prototype.toJson = function() {\n    return JSON.stringify({\n        id: this.id,\n        jsonrpc: this.jsonrpc,\n        method: this.method,\n        params: this.params\n    });\n};\n\nexport default KodiRequest;","import KodiRequest from \"./KodiRequest\";\n\nexport default (function () {\n    let requestId = 1;\n    return options => new KodiRequest(requestId++, options)\n})();\n","import KodiRequestFactory from './KodiRequestFactory.js';\n\nfunction KodiClient(transport, options) {\n    if (!(this instanceof KodiClient)) {\n        return new KodiClient(transport);\n    }\n\n    options = options || {};\n    let listeners = [];\n\n    const factory = options.factory || KodiRequestFactory;\n\n    // transport.addNotificationListener((notification, messageEvent) => {\n    //     listeners.forEach(callback => callback(notification, messageEvent));\n    // });\n\n    /**\n     * request(method, params)\n     * request({object})\n     */\n    KodiClient.prototype.createRequest = function () {\n        if (typeof arguments[0] == 'object') {\n            return Object.assign(factory.call(factory, {}), arguments[0]);\n        }\n        return factory.call(factory, {method: arguments[0], params: arguments[1]});\n    };\n\n    KodiClient.prototype.connect = transport.connect;\n\n    KodiClient.prototype.disconnect = transport.disconnect;\n\n    KodiClient.prototype.request = (method, params, options) => this.send(this.createRequest(method, params), options);\n\n    KodiClient.prototype.send = (request, options) => transport.send(request, options);\n\n    KodiClient.prototype.addNotificationListener = function (listener) {\n        const index = listeners.push(listener);\n\n        return () => {\n            delete listeners[index];\n        };\n    };\n\n    KodiClient.prototype.removeNotificationListener = function (listener) {\n        listeners = listeners.filter(currentListener => currentListener === listener);\n    };\n}\n\nexport default KodiClient;\n","import KodiClient from './KodiClient.js';\n\nfunction KodiClientRPC(kodiClient) {\n    if (!(this instanceof KodiClientRPC)) {\n        return new KodiClientRPC(kodiClient);\n    }\n\n    if (!(kodiClient instanceof KodiClient)) {\n        throw new TypeError('It must be a KodiClient.');\n    }\n\n    let schema = null;\n    let listeners = {};\n\n    this.getClient = () => kodiClient;\n    this.onReady = new Promise((resolve, reject) => {\n        kodiClient.request('JSONRPC.Introspect', {\n            \"getdescriptions\": true,\n            \"getmetadata\": true,\n            \"filterbytransport\": true\n        }).then(data => {\n            schema = data.result;\n\n            const methods = schema.methods;\n            for (const name in methods) {\n                let [namespace, method] = name.split('.');\n                if (!this[namespace]) {\n                    this[namespace] = {};\n                }\n                this[namespace][method] = (params, options) => {\n                    return kodiClient.request(name, params, options).then(response => response.result);\n                };\n            }\n\n            const notifications = schema.notifications;\n\n            for (const name in notifications) {\n                let [namespace, notification] = name.split('.');\n                if (!this[namespace]) {\n                    this[namespace] = {};\n                }\n                this[namespace][notification] = callback => {\n                    if (!listeners[`${namespace}.${notification}`]) listeners[`${namespace}.${notification}`] = [];\n                    listeners[`${namespace}.${notification}`].push(callback);\n                };\n            }\n\n            kodiClient.addNotificationListener((notification, messageEvent) => {\n                if (listeners.hasOwnProperty(notification.method)) {\n                    listeners[notification.method].forEach(callback => callback(notification.params, messageEvent));\n                }\n            });\n\n            resolve([this, schema]);\n\n        }).catch(reject);\n    });\n    KodiClientRPC.prototype.createRequest = kodiClient.createRequest;\n    KodiClientRPC.prototype.connect = () => {\n        return kodiClient.connect();\n    };\n    KodiClientRPC.prototype.disconnect = kodiClient.disconnect;\n    KodiClientRPC.prototype.request = kodiClient.request;\n    KodiClientRPC.prototype.send = kodiClient.send;\n    KodiClientRPC.prototype.addNotificationListener = kodiClient.addNotificationListener;\n    KodiClientRPC.prototype.removeNotificationListener = kodiClient.removeNotificationListener;\n}\n\nexport default KodiClientRPC;\n","function KodiNotification(data) {\n    if (!(this instanceof KodiNotification)) {\n        return new KodiNotification(data);\n    }\n\n    Object.assign(this, data);\n}\n\nexport default KodiNotification;","function KodiResponse(data) {\n    if (!(this instanceof KodiResponse)) {\n        return new KodiResponse(data);\n    }\n\n    if (data && 'object' !== Object.prototype.toString.call(data).split(\" \").pop().split(\"]\").shift().toLowerCase()) {\n        throw new TypeError('Data must be an object.');\n    }\n\n    Object.assign(this, data);\n}\n\nexport default KodiResponse;","import KodiNotification from '../KodiNotification.js';\nimport KodiResponse from '../KodiResponse.js';\n\nfunction KodiWebSocketTransport(uri) {\n    if (!(this instanceof KodiWebSocketTransport)) {\n        return new KodiWebSocketTransport(uri);\n    }\n\n    let deferreds = {};\n    let listeners = [];\n    let websocket;\n    let onReady;\n\n    KodiWebSocketTransport.prototype.connect = () => {\n        if (onReady) {\n            return onReady\n        }\n        onReady = new Promise((resolve, reject) => {\n            websocket = new WebSocket(uri);\n\n            websocket.onopen = () => resolve(websocket);\n\n            websocket.onerror = event => {\n                if (websocket.readyState == 1) {\n                    console.error(event);\n                }\n            };\n\n            websocket.onmessage = event => {\n                const messageData = JSON.parse(event.data);\n                if (null === messageData.id) {\n                    console.error(event);\n\n                    return;\n                }\n                if (messageData.id) {\n                    const response = new Kodi.Response(messageData);\n                    response.error ?\n                        deferreds[response.id].deferredReject(response) :\n                        deferreds[response.id].deferredResolve(response);\n\n                    return;\n                }\n\n                const notification = new KodiNotification(messageData);\n                listeners.forEach(callback => callback(notification, event));\n            };\n\n            websocket.onclose = event => {\n                websocket = null;\n                if (event.code != 3001) {\n                    reject(event);\n                }\n            };\n        });\n\n        return onReady;\n    };\n\n    KodiWebSocketTransport.prototype.send = (request, options) => {\n        if (!request.id) {\n            throw new TypeError('Request id is require.');\n        }\n        let transport = this;\n        return new Promise(function (resolve, reject) {\n            deferreds[request.id] = {promise: this, deferredResolve: resolve, deferredReject: reject};\n\n            try {\n                transport.connect().then(() => websocket.send(request.toJson()));\n            } catch (error) {\n                reject(new KodiResponse({message: 'An error occured during sending message.', error: error}));\n            }\n        });\n    };\n\n    KodiWebSocketTransport.prototype.addNotificationListener = listener => {\n        const index = listeners.push(listener);\n\n        return () => {\n            delete listeners[index];\n        };\n    };\n\n    KodiWebSocketTransport.prototype.removeNotificationListener = listener => {\n        listeners = listeners.filter(currentListener => currentListener === listener);\n    };\n\n    KodiWebSocketTransport.prototype.disconnect = () => {\n        if (websocket) {\n            websocket.close(3001);\n        }\n    };\n}\n\nexport default KodiWebSocketTransport;\n","import KodiResponse from '../KodiResponse.js';\nimport TransportError from 'KodiTransportError.js';\n\nfunction KodiXMLHttpTransport(uri) {\n    if (!(this instanceof KodiXMLHttpTransport)) {\n        return new KodiXMLHttpTransport(uri);\n    }\n\n    KodiXMLHttpTransport.prototype.connect = async () => this;\n\n    KodiXMLHttpTransport.prototype.send = function (request, options) {\n        return new Promise((resolve, reject) => {\n            const req = new XMLHttpRequest();\n            req.onreadystatechange = function (event) {\n                if (this.readyState === XMLHttpRequest.DONE) {\n                    if (this.status === 200) {\n                        const response = new KodiResponse(JSON.parse(this.responseText));\n                        response.error ? reject(response) : resolve(response);\n                    } else {\n                        let e = new TransportError('XHR Error' + this.statusText, event);\n                        reject(new KodiResponse({message: e.message, error: e}));\n                    }\n                }\n            };\n            req.onerror = function (event) {\n                let e = new TransportError('XHR Error' + this.statusText, event);\n                reject(new KodiResponse({message: e.message, error: e}));\n            };\n            req.open('GET', uri + '?request=' + request.toJson(), true);\n            req.send(null);\n        });\n    };\n\n    KodiXMLHttpTransport.prototype.addNotificationListener = function (listener) {\n        console.warn('Notification for KodiXMLHttpTransport is not implemented yet');\n    };\n\n    KodiXMLHttpTransport.prototype.close = function () {\n    };\n}\n\n\nexport default KodiXMLHttpTransport;\n","export default handler => (notification, messageEvent) => {\n    console.log('Notification %o.', notification, messageEvent);\n\n    handler(notification, messageEvent);\n}","export default (notifier, middlewares) => handler => {\n    if (!middlewares) {\n        return notifier(handler);\n    }\n    return notifier(\n        middlewares.reverse().reduce(\n            (prev, cur) => null === prev ? cur : cur(prev),\n            handler\n        )\n    );\n}\n","export default handler => (request, options) => {\n    console.log('Request %o', request);\n    const startTime = Date.now();\n\n    return handler(request, options).then(data => {\n        const end = Date.now();\n        console.log('Response %o in %d ms', data, end - startTime);\n\n        return data;\n    });\n};","export default cache => handler => (request, options) => {\n    const cacheOptions = Object.assign({\n        cache: true,\n        checkCache: true,\n        writeCache: true\n    }, options);\n\n    const key = JSON.stringify([request.method, request.params]);\n    return new Promise((resolve, reject) => {\n        if (cacheOptions.cache && cacheOptions.checkCache) {\n            const item = cache.get(key);\n            if (item) {\n                console.log('Cache hit %s', key, item);\n                resolve(item);\n\n                return;\n            }\n\n            console.log('Cache miss %s', key);\n        }\n\n        handler(request, options)\n            .then(data => {\n                if (cacheOptions.cache && cacheOptions.writeCache) {\n                    console.debug('Cache write %s', key, data);\n                    cache.set(key, data);\n                }\n                resolve(data);\n            })\n            .catch(error => reject(error));\n    });\n};\n\n","export default (handler, middlewares) => {\n    if (!middlewares) {\n        return handler;\n    }\n    return middlewares.reverse().reduce(\n        (prev, cur) => null === prev ? cur : cur(prev),\n        handler\n    );\n}\n","function InMemory(restoreData) {\n    if (!(this instanceof InMemory)) {\n        return new InMemory(restoreData);\n    }\n\n    let data = restoreData || {};\n\n    InMemory.prototype.set = (key, value) => data[key] = value;\n\n    InMemory.prototype.get = key => data[key];\n\n    InMemory.prototype.delete = key => delete data[key];\n\n    InMemory.prototype.clear = () => data = {};\n}\n\nexport default InMemory;","function LocalStorage(prefix) {\n    if (!(this instanceof LocalStorage)) {\n        return new LocalStorage(prefix);\n    }\n    prefix = prefix || '';\n    let storage = localStorage;\n\n    LocalStorage.prototype.set = (key, value) => localStorage.setItem(prefix+key, JSON.stringify(value));\n\n    LocalStorage.prototype.get = key => {\n        const item = localStorage.getItem(prefix+key);\n        if (item){\n            return JSON.parse(item);\n        }\n\n        return item;\n    };\n\n    LocalStorage.prototype.delete = key => localStorage.removeItem(prefix+key);\n\n    LocalStorage.prototype.clear = () => localStorage.clear();\n}\n\nexport default LocalStorage;","function withTTL(cache, TTL) {\n    return {\n        set: (key, value) => cache.set(key, {time: Date.now(), value: value}),\n        get: key => {\n            const item = cache.get(key);\n            if (item && item.time) {\n                if (item.time > Date.now() - TTL) {\n                    return item.value;\n                }\n\n                console.log('Cache expire.');\n\n                return null;\n            }\n\n            return item;\n        },\n        delete: key => cache.delete(key),\n        clear: () => cache.clear(),\n    };\n}\n\nexport default withTTL;","import KodiClient from './KodiClient.js';\nimport KodiClientRPC from './KodiClientRPC.js';\n\nimport KodiWebSocketTransport from './transport/KodiWebSocketTransport.js';\nimport KodiXMLHttpTransport from './transport/KodiXMLHttpTransport.js';\n\nimport LoggingNotificationMiddleware from './middleware/notifier/logging.js';\nimport stackNotification from './middleware/notifier/stackFactory.js';\n\nimport LoggingMiddleware from './middleware/query/logging.js';\nimport CacheMiddleware from './middleware/query/cache.js';\nimport stack from './middleware/query/stackFactory.js';\n\nimport InMemory from './cache/InMemory.js';\nimport LocalStorage from './cache/LocalStorage.js';\nimport withTTL from './cache/withTTL.js';\n\nconst defaultWebsocketURI = 'ws://{host}:9090';\nconst defaultHttpURI = `http://{host}:8080/jsonrpc`;\n\nfunction getTransport(options) {\n    let transport = options.transport;\n\n    if (!transport) {\n        transport = typeof window.WebSocket === 'function' ? defaultWebsocketURI : defaultHttpURI;\n        transport = transport.replace('{host}', window.location)\n    }\n    switch (typeof transport) {\n        case 'object':\n            if (\n                typeof transport.send !== 'function' ||\n                typeof transport.addNotificationListener !== 'function'\n            ) {\n                throw TypeError('Kodi transport object must implement send(request, options), addNotificationListener(listener) function')\n            }\n            return transport;\n        case 'string':\n            let url = '';\n            try {\n                url = new URL(transport);\n            } catch (e) {\n                throw TypeError('Kodi transport string must be a valid path');\n            }\n            if (null !== url.protocol.match(/wss?:/)) {\n                return new KodiWebSocketTransport(url.toString());\n            }\n            return new KodiXMLHttpTransport(url.toString());\n        default:\n            throw TypeError('Kodi transport can be object or url');\n    }\n}\n\nfunction getCache(options) {\n    let cache = options.cache;\n    if (typeof cache == 'object') {\n        if (\n            typeof cache.set !== 'function' ||\n            typeof cache.get !== 'function' ||\n            typeof cache.delete !== 'function' ||\n            typeof cache.clear !== 'function'\n        ) {\n            throw TypeError('Kodi cache must implement set(key, value), get(key), delete(key), clear() function')\n        }\n        return cache\n    }\n\n    return window.localStorage ? new LocalStorage('request_') : new InMemory();\n}\n\nfunction getMiddlewares(options) {\n    let middlewares = options.middlewares || [LoggingMiddleware];\n\n    if (options.cache !== false) {\n        middlewares.push(\n            CacheMiddleware(withTTL(getCache(options), options.cacheTTL || 10000))\n        )\n    }\n\n    return middlewares;\n}\n\nfunction getNotificationMiddlewares(options) {\n    return options.notificationMiddlewares || [LoggingNotificationMiddleware];\n}\n\nexport function createClientRPC(options) {\n    return new KodiClientRPC(createClient(options));\n}\n\nexport function createClient(options) {\n    const transport = getTransport(options);\n    return new KodiClient({\n        connect: transport.connect,\n        disconnect: transport.disconnect,\n        send: stack(transport.send, getMiddlewares(options)),\n        addNotificationListener: stackNotification(transport.addNotificationListener, getNotificationMiddlewares(options))\n    });\n}\n"],"names":["JSONRPC_VERSION","KodiRequest","id","options","this","Object","prototype","toString","call","split","pop","shift","toLowerCase","TypeError","method","params","jsonrpc","toJson","JSON","stringify","requestId","KodiClient","transport","listeners","factory","KodiRequestFactory","createRequest","arguments","assign","connect","disconnect","request","send","addNotificationListener","listener","index","push","removeNotificationListener","filter","currentListener","KodiClientRPC","kodiClient","schema","getClient","onReady","Promise","resolve","reject","getdescriptions","getmetadata","filterbytransport","then","data","result","methods","name","namespace","response","notifications","notification","callback","messageEvent","hasOwnProperty","forEach","catch","KodiNotification","KodiResponse","KodiWebSocketTransport","uri","websocket","deferreds","WebSocket","onopen","onerror","event","readyState","console","error","onmessage","messageData","parse","Kodi","Response","deferredReject","deferredResolve","onclose","code","promise","message","close","KodiXMLHttpTransport","async","req","XMLHttpRequest","onreadystatechange","DONE","status","responseText","e","TransportError","statusText","open","warn","handler","log","notifier","middlewares","reverse","reduce","prev","cur","startTime","Date","now","end","cache","cacheOptions","checkCache","writeCache","key","item","get","debug","set","InMemory","restoreData","value","delete","clear","LocalStorage","prefix","localStorage","setItem","getItem","removeItem","withTTL","TTL","time","getMiddlewares","LoggingMiddleware","CacheMiddleware","window","getCache","cacheTTL","getNotificationMiddlewares","notificationMiddlewares","LoggingNotificationMiddleware","createClient","replace","location","url","URL","protocol","match","getTransport","stack","stackNotification"],"mappings":"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"}